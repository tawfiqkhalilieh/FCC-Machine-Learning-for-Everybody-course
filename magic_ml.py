# -*- coding: utf-8 -*-
"""MAGIC-ML

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ex9JZYx-I0gJcVQrH1g4VCB_QaolXUQ9
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import RandomOverSampler

pd.read_csv("magic04.data")

cols = ["fLength", "fWidth", "fSize", "fConc", "fConc1", "fAsym", "fM3Long", "fM3Trans", "fAlpha", "fDist", "class"]

df = pd.read_csv("magic04.data", names=cols)

df

df.head

df.head()

df["class"].unique()

# convert it to 0 for g and 1 fog h

df["class"] = (df["class"] == "g").astype(int)

df

df.head(10)

for label in cols[:-1]:
  plt.hist(
      df[df["class"] == 1][label], color="blue", label= "gamma", alpha=0.7, density=True
  )
  plt.hist(
      df[df["class"] == 0][label], color="red", label= "hardon", alpha=0.7, density=True
  )
  plt.ylabel("Probability")
  plt.xlabel(label)
  plt.legend()
  plt.show()

"""#Train, validation, test dataset

"""

train, valid, test = np.split(df.sample(frac=1), [int(0.6*len(df)), int(0.8*len(df))])

def scale_dataset(dataframe, oversample=False):
  X = dataframe[dataframe.columns[:-1]].values
  y = dataframe[dataframe.columns[-1]].values

  scaler = StandardScaler()
  X = scaler.fit_transform(X)

  if oversample:
    ros = RandomOverSampler()
    X, y = ros.fit_resample(X, y)

  data = np.hstack((X, np.reshape(y, (-1, 1))))

  return data, X, y

train, X_train, y_train = scale_dataset(train, oversample=True)
valid, X_valid, y_valid = scale_dataset(valid)
test, X_test, y_test = scale_dataset(test)

